#include <deque>
#include <ranges>
#include <format>
#include <string_view>
#include <array>
#include <algorithm>
#include <exception>

using namespace std::literals;
namespace ranges = std::ranges;
namespace views = std::views;

class decimal {
    public:
    using container_t = std::deque<uint8_t>;

    private:
    container_t _integral;
    container_t _decimal;
    void _trim_integral() {
        while((_integral.front() == 0) && _integral.size() > 1) {
            _integral.pop_front();
        }
    }

    public:
    decimal() : _integral{0}, _decimal{0} {};
    decimal(const std::string_view& s) {
        container_t* current_ct = &_integral;
        for(const char& c : s) {
            if(c == '.') {
                current_ct = &_decimal;
            } else if((c >= '0') && (c <= '9')) {
                current_ct->push_back(c - '0');
            } else {
                throw std::runtime_error("Invalid string.");
            }
        }
        if(current_ct == &_integral) {
            _decimal.push_back(0);
        }
    }
    size_t integral_length() const {
        return _integral.size();
    }
    size_t decimal_length() const {
        return _decimal.size();
    }
    size_t length() const {
        return integral_length() + decimal_length() + 1;
    }
    void match(const decimal& other) {
        if(decimal_length() < other.decimal_length()) {
            _decimal.resize(other.decimal_length());
        }
    }
    decimal& operator-=(const decimal& other) {
        match(other);
        bool lend = false;
        auto sub = [&lend](uint8_t& sp, const uint8_t& op) {
            uint8_t m = op + lend;
            if(sp < m) {
                lend = true;
                sp += 10;
            } else {
                lend = false;
            }
            sp -= m;
        };
        for(auto t : views::reverse(views::zip(_decimal, other._decimal))) {
            sub(std::get<0>(t), std::get<1>(t));
        }
        auto sit = ranges::rbegin(_integral);
        auto oit = ranges::rbegin(other._integral);
        while(oit != ranges::rend(other._integral)) {
            sub(*sit, *oit);
            ++sit; ++oit;
        }
        if(lend) *sit -= 1;
        _trim_integral();
        return *this;
    }
    auto operator<=>(const decimal& other) const {
        if(integral_length() < other.integral_length()) {
            return std::strong_ordering::less;
        } else if(integral_length() > other.integral_length()) {
            return std::strong_ordering::greater;
        }
        auto cmp = [](const container_t& self, const container_t& other) {
            for(auto t : views::zip(self, other)) {
                auto& sp = std::get<0>(t);
                auto& op = std::get<1>(t);
                if(sp != op) {
                    return sp <=> op;
                }
            }
            return std::strong_ordering::equal;
        };
        auto tmp = cmp(_integral, other._integral);
        if(std::is_eq(tmp)) {
            tmp = cmp(_decimal, other._decimal);
            if(std::is_eq(tmp)) {
                return _decimal.size() <=> other._decimal.size();
            } else {
                return tmp;
            }
        } else {
            return tmp;
        }
    }
    operator bool() const {
        bool int_non_zero = (_integral.size() > 1) || (_integral.front() != 0);
        bool dec_non_zero = ranges::any_of(_decimal, [](uint8_t p) {return p != 0;});
        return int_non_zero || dec_non_zero;
    }
    friend struct std::formatter<decimal>;
};

template <>
struct std::formatter<decimal> {
    constexpr auto parse(std::format_parse_context& ctx) {
        return ranges::begin(ctx);
    }
    auto format(const decimal& dec, std::format_context& ctx) const {
        auto vt = views::transform([](uint8_t p) -> char {return '0' + p;});
        return std::format_to(ctx.out(), "{:s}.{:s}", dec._integral | vt, dec._decimal | vt);
    }
};

std::array<decimal, 277> pow_2 = {
    "170141183460469231731687303715884105728"sv,
    "85070591730234615865843651857942052864"sv,
    "42535295865117307932921825928971026432"sv,
    "21267647932558653966460912964485513216"sv,
    "10633823966279326983230456482242756608"sv,
    "5316911983139663491615228241121378304"sv,
    "2658455991569831745807614120560689152"sv,
    "1329227995784915872903807060280344576"sv,
    "664613997892457936451903530140172288"sv,
    "332306998946228968225951765070086144"sv,
    "166153499473114484112975882535043072"sv,
    "83076749736557242056487941267521536"sv,
    "41538374868278621028243970633760768"sv,
    "20769187434139310514121985316880384"sv,
    "10384593717069655257060992658440192"sv,
    "5192296858534827628530496329220096"sv,
    "2596148429267413814265248164610048"sv,
    "1298074214633706907132624082305024"sv,
    "649037107316853453566312041152512"sv,
    "324518553658426726783156020576256"sv,
    "162259276829213363391578010288128"sv,
    "81129638414606681695789005144064"sv,
    "40564819207303340847894502572032"sv,
    "20282409603651670423947251286016"sv,
    "10141204801825835211973625643008"sv,
    "5070602400912917605986812821504"sv,
    "2535301200456458802993406410752"sv,
    "1267650600228229401496703205376"sv,
    "633825300114114700748351602688"sv,
    "316912650057057350374175801344"sv,
    "158456325028528675187087900672"sv,
    "79228162514264337593543950336"sv,
    "39614081257132168796771975168"sv,
    "19807040628566084398385987584"sv,
    "9903520314283042199192993792"sv,
    "4951760157141521099596496896"sv,
    "2475880078570760549798248448"sv,
    "1237940039285380274899124224"sv,
    "618970019642690137449562112"sv,
    "309485009821345068724781056"sv,
    "154742504910672534362390528"sv,
    "77371252455336267181195264"sv,
    "38685626227668133590597632"sv,
    "19342813113834066795298816"sv,
    "9671406556917033397649408"sv,
    "4835703278458516698824704"sv,
    "2417851639229258349412352"sv,
    "1208925819614629174706176"sv,
    "604462909807314587353088"sv,
    "302231454903657293676544"sv,
    "151115727451828646838272"sv,
    "75557863725914323419136"sv,
    "37778931862957161709568"sv,
    "18889465931478580854784"sv,
    "9444732965739290427392"sv,
    "4722366482869645213696"sv,
    "2361183241434822606848"sv,
    "1180591620717411303424"sv,
    "590295810358705651712"sv,
    "295147905179352825856"sv,
    "147573952589676412928"sv,
    "73786976294838206464"sv,
    "36893488147419103232"sv,
    "18446744073709551616"sv,
    "9223372036854775808"sv,
    "4611686018427387904"sv,
    "2305843009213693952"sv,
    "1152921504606846976"sv,
    "576460752303423488"sv,
    "288230376151711744"sv,
    "144115188075855872"sv,
    "72057594037927936"sv,
    "36028797018963968"sv,
    "18014398509481984"sv,
    "9007199254740992"sv,
    "4503599627370496"sv,
    "2251799813685248"sv,
    "1125899906842624"sv,
    "562949953421312"sv,
    "281474976710656"sv,
    "140737488355328"sv,
    "70368744177664"sv,
    "35184372088832"sv,
    "17592186044416"sv,
    "8796093022208"sv,
    "4398046511104"sv,
    "2199023255552"sv,
    "1099511627776"sv,
    "549755813888"sv,
    "274877906944"sv,
    "137438953472"sv,
    "68719476736"sv,
    "34359738368"sv,
    "17179869184"sv,
    "8589934592"sv,
    "4294967296"sv,
    "2147483648"sv,
    "1073741824"sv,
    "536870912"sv,
    "268435456"sv,
    "134217728"sv,
    "67108864"sv,
    "33554432"sv,
    "16777216"sv,
    "8388608"sv,
    "4194304"sv,
    "2097152"sv,
    "1048576"sv,
    "524288"sv,
    "262144"sv,
    "131072"sv,
    "65536"sv,
    "32768"sv,
    "16384"sv,
    "8192"sv,
    "4096"sv,
    "2048"sv,
    "1024"sv,
    "512"sv,
    "256"sv,
    "128"sv,
    "64"sv,
    "32"sv,
    "16"sv,
    "8"sv,
    "4"sv,
    "2"sv,
    "1"sv,
    "0.5"sv,
    "0.25"sv,
    "0.125"sv,
    "0.0625"sv,
    "0.03125"sv,
    "0.015625"sv,
    "0.0078125"sv,
    "0.00390625"sv,
    "0.001953125"sv,
    "0.0009765625"sv,
    "0.00048828125"sv,
    "0.000244140625"sv,
    "0.0001220703125"sv,
    "0.00006103515625"sv,
    "0.000030517578125"sv,
    "0.0000152587890625"sv,
    "0.00000762939453125"sv,
    "0.000003814697265625"sv,
    "0.0000019073486328125"sv,
    "0.00000095367431640625"sv,
    "0.000000476837158203125"sv,
    "0.0000002384185791015625"sv,
    "0.00000011920928955078125"sv,
    "0.000000059604644775390625"sv,
    "0.0000000298023223876953125"sv,
    "0.00000001490116119384765625"sv,
    "0.000000007450580596923828125"sv,
    "0.0000000037252902984619140625"sv,
    "0.00000000186264514923095703125"sv,
    "0.000000000931322574615478515625"sv,
    "0.0000000004656612873077392578125"sv,
    "0.00000000023283064365386962890625"sv,
    "0.000000000116415321826934814453125"sv,
    "0.0000000000582076609134674072265625"sv,
    "0.00000000002910383045673370361328125"sv,
    "0.000000000014551915228366851806640625"sv,
    "0.0000000000072759576141834259033203125"sv,
    "0.00000000000363797880709171295166015625"sv,
    "0.000000000001818989403545856475830078125"sv,
    "0.0000000000009094947017729282379150390625"sv,
    "0.00000000000045474735088646411895751953125"sv,
    "0.000000000000227373675443232059478759765625"sv,
    "0.0000000000001136868377216160297393798828125"sv,
    "0.00000000000005684341886080801486968994140625"sv,
    "0.000000000000028421709430404007434844970703125"sv,
    "0.0000000000000142108547152020037174224853515625"sv,
    "0.00000000000000710542735760100185871124267578125"sv,
    "0.000000000000003552713678800500929355621337890625"sv,
    "0.0000000000000017763568394002504646778106689453125"sv,
    "0.00000000000000088817841970012523233890533447265625"sv,
    "0.000000000000000444089209850062616169452667236328125"sv,
    "0.0000000000000002220446049250313080847263336181640625"sv,
    "0.00000000000000011102230246251565404236316680908203125"sv,
    "0.000000000000000055511151231257827021181583404541015625"sv,
    "0.0000000000000000277555756156289135105907917022705078125"sv,
    "0.00000000000000001387778780781445675529539585113525390625"sv,
    "0.000000000000000006938893903907228377647697925567626953125"sv,
    "0.0000000000000000034694469519536141888238489627838134765625"sv,
    "0.00000000000000000173472347597680709441192448139190673828125"sv,
    "0.000000000000000000867361737988403547205962240695953369140625"sv,
    "0.0000000000000000004336808689942017736029811203479766845703125"sv,
    "0.00000000000000000021684043449710088680149056017398834228515625"sv,
    "0.000000000000000000108420217248550443400745280086994171142578125"sv,
    "0.0000000000000000000542101086242752217003726400434970855712890625"sv,
    "0.00000000000000000002710505431213761085018632002174854278564453125"sv,
    "0.000000000000000000013552527156068805425093160010874271392822265625"sv,
    "0.0000000000000000000067762635780344027125465800054371356964111328125"sv,
    "0.00000000000000000000338813178901720135627329000271856784820556640625"sv,
    "0.000000000000000000001694065894508600678136645001359283924102783203125"sv,
    "0.0000000000000000000008470329472543003390683225006796419620513916015625"sv,
    "0.00000000000000000000042351647362715016953416125033982098102569580078125"sv,
    "0.000000000000000000000211758236813575084767080625169910490512847900390625"sv,
    "0.0000000000000000000001058791184067875423835403125849552452564239501953125"sv,
    "0.00000000000000000000005293955920339377119177015629247762262821197509765625"sv,
    "0.000000000000000000000026469779601696885595885078146238811314105987548828125"sv,
    "0.0000000000000000000000132348898008484427979425390731194056570529937744140625"sv,
    "0.00000000000000000000000661744490042422139897126953655970282852649688720703125"sv,
    "0.000000000000000000000003308722450212110699485634768279851414263248443603515625"sv,
    "0.0000000000000000000000016543612251060553497428173841399257071316242218017578125"sv,
    "0.00000000000000000000000082718061255302767487140869206996285356581211090087890625"sv,
    "0.000000000000000000000000413590306276513837435704346034981426782906055450439453125"sv,
    "0.0000000000000000000000002067951531382569187178521730174907133914530277252197265625"sv,
    "0.00000000000000000000000010339757656912845935892608650874535669572651386260986328125"sv,
    "0.000000000000000000000000051698788284564229679463043254372678347863256931304931640625"sv,
    "0.0000000000000000000000000258493941422821148397315216271863391739316284656524658203125"sv,
    "0.00000000000000000000000001292469707114105741986576081359316958696581423282623291015625"sv,
    "0.000000000000000000000000006462348535570528709932880406796584793482907116413116455078125"sv,
    "0.0000000000000000000000000032311742677852643549664402033982923967414535582065582275390625"sv,
    "0.00000000000000000000000000161558713389263217748322010169914619837072677910327911376953125"sv,
    "0.000000000000000000000000000807793566946316088741610050849573099185363389551639556884765625"sv,
    "0.0000000000000000000000000004038967834731580443708050254247865495926816947758197784423828125"sv,
    "0.00000000000000000000000000020194839173657902218540251271239327479634084738790988922119140625"sv,
    "0.000000000000000000000000000100974195868289511092701256356196637398170423693954944610595703125"sv,
    "0.0000000000000000000000000000504870979341447555463506281780983186990852118469774723052978515625"sv,
    "0.00000000000000000000000000002524354896707237777317531408904915934954260592348873615264892578125"sv,
    "0.000000000000000000000000000012621774483536188886587657044524579674771302961744368076324462890625"sv,
    "0.0000000000000000000000000000063108872417680944432938285222622898373856514808721840381622314453125"sv,
    "0.00000000000000000000000000000315544362088404722164691426113114491869282574043609201908111572265625"sv,
    "0.000000000000000000000000000001577721810442023610823457130565572459346412870218046009540557861328125"sv,
    "0.0000000000000000000000000000007888609052210118054117285652827862296732064351090230047702789306640625"sv,
    "0.00000000000000000000000000000039443045261050590270586428264139311483660321755451150238513946533203125"sv,
    "0.000000000000000000000000000000197215226305252951352932141320696557418301608777255751192569732666015625"sv,
    "0.0000000000000000000000000000000986076131526264756764660706603482787091508043886278755962848663330078125"sv,
    "0.00000000000000000000000000000004930380657631323783823303533017413935457540219431393779814243316650390625"sv,
    "0.000000000000000000000000000000024651903288156618919116517665087069677287701097156968899071216583251953125"sv,
    "0.0000000000000000000000000000000123259516440783094595582588325435348386438505485784844495356082916259765625"sv,
    "0.00000000000000000000000000000000616297582203915472977912941627176741932192527428924222476780414581298828125"sv,
    "0.000000000000000000000000000000003081487911019577364889564708135883709660962637144621112383902072906494140625"sv,
    "0.0000000000000000000000000000000015407439555097886824447823540679418548304813185723105561919510364532470703125"sv,
    "0.00000000000000000000000000000000077037197775489434122239117703397092741524065928615527809597551822662353515625"sv,
    "0.000000000000000000000000000000000385185988877447170611195588516985463707620329643077639047987759113311767578125"sv,
    "0.0000000000000000000000000000000001925929944387235853055977942584927318538101648215388195239938795566558837890625"sv,
    "0.00000000000000000000000000000000009629649721936179265279889712924636592690508241076940976199693977832794189453125"sv,
    "0.000000000000000000000000000000000048148248609680896326399448564623182963452541205384704880998469889163970947265625"sv,
    "0.0000000000000000000000000000000000240741243048404481631997242823115914817262706026923524404992349445819854736328125"sv,
    "0.00000000000000000000000000000000001203706215242022408159986214115579574086313530134617622024961747229099273681640625"sv,
    "0.000000000000000000000000000000000006018531076210112040799931070577897870431567650673088110124808736145496368408203125"sv,
    "0.0000000000000000000000000000000000030092655381050560203999655352889489352157838253365440550624043680727481842041015625"sv,
    "0.00000000000000000000000000000000000150463276905252801019998276764447446760789191266827202753120218403637409210205078125"sv,
    "0.000000000000000000000000000000000000752316384526264005099991383822237233803945956334136013765601092018187046051025390625"sv,
    "0.0000000000000000000000000000000000003761581922631320025499956919111186169019729781670680068828005460090935230255126953125"sv,
    "0.00000000000000000000000000000000000018807909613156600127499784595555930845098648908353400344140027300454676151275634765625"sv,
    "0.000000000000000000000000000000000000094039548065783000637498922977779654225493244541767001720700136502273380756378173828125"sv,
    "0.0000000000000000000000000000000000000470197740328915003187494614888898271127466222708835008603500682511366903781890869140625"sv,
    "0.00000000000000000000000000000000000002350988701644575015937473074444491355637331113544175043017503412556834518909454345703125"sv,
    "0.000000000000000000000000000000000000011754943508222875079687365372222456778186655567720875215087517062784172594547271728515625"sv,
    "0.0000000000000000000000000000000000000058774717541114375398436826861112283890933277838604376075437585313920862972736358642578125"sv,
    "0.00000000000000000000000000000000000000293873587705571876992184134305561419454666389193021880377187926569604314863681793212890625"sv,
    "0.000000000000000000000000000000000000001469367938527859384960920671527807097273331945965109401885939632848021574318408966064453125"sv,
    "0.0000000000000000000000000000000000000007346839692639296924804603357639035486366659729825547009429698164240107871592044830322265625"sv,
    "0.00000000000000000000000000000000000000036734198463196484624023016788195177431833298649127735047148490821200539357960224151611328125"sv,
    "0.000000000000000000000000000000000000000183670992315982423120115083940975887159166493245638675235742454106002696789801120758056640625"sv,
    "0.0000000000000000000000000000000000000000918354961579912115600575419704879435795832466228193376178712270530013483949005603790283203125"sv,
    "0.00000000000000000000000000000000000000004591774807899560578002877098524397178979162331140966880893561352650067419745028018951416015625"sv,
    "0.000000000000000000000000000000000000000022958874039497802890014385492621985894895811655704834404467806763250337098725140094757080078125"sv,
    "0.0000000000000000000000000000000000000000114794370197489014450071927463109929474479058278524172022339033816251685493625700473785400390625"sv,
    "0.00000000000000000000000000000000000000000573971850987445072250359637315549647372395291392620860111695169081258427468128502368927001953125"sv,
    "0.000000000000000000000000000000000000000002869859254937225361251798186577748236861976456963104300558475845406292137340642511844635009765625"sv,
    "0.0000000000000000000000000000000000000000014349296274686126806258990932888741184309882284815521502792379227031460686703212559223175048828125"sv,
    "0.00000000000000000000000000000000000000000071746481373430634031294954664443705921549411424077607513961896135157303433516062796115875244140625"sv,
    "0.000000000000000000000000000000000000000000358732406867153170156474773322218529607747057120388037569809480675786517167580313980579376220703125"sv,
    "0.0000000000000000000000000000000000000000001793662034335765850782373866611092648038735285601940187849047403378932585837901569902896881103515625"sv,
    "0.00000000000000000000000000000000000000000008968310171678829253911869333055463240193676428009700939245237016894662929189507849514484405517578125"sv,
    "0.000000000000000000000000000000000000000000044841550858394146269559346665277316200968382140048504696226185084473314645947539247572422027587890625"sv,
    "0.0000000000000000000000000000000000000000000224207754291970731347796733326386581004841910700242523481130925422366573229737696237862110137939453125"sv,
    "0.00000000000000000000000000000000000000000001121038771459853656738983666631932905024209553501212617405654627111832866148688481189310550689697265625"sv,
    "0.000000000000000000000000000000000000000000005605193857299268283694918333159664525121047767506063087028273135559164330743442405946552753448486328125"sv,
    "0.0000000000000000000000000000000000000000000028025969286496341418474591665798322625605238837530315435141365677795821653717212029732763767242431640625"sv,
    "0.00000000000000000000000000000000000000000000140129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125"sv
};
constexpr int8_t pow_2_max_exp_raw = 0b11111110 - 127;
constexpr uint8_t pow_2_max_exp = pow_2_max_exp_raw + 127;